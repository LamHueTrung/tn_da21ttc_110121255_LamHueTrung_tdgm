<div class="container py-4">
    <!-- B·ªô l·ªçc + export -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="monthFilter">L·ªçc theo th√°ng:</label>
            <input type="month" id="monthFilter" class="form-control">
        </div>
        <div class="col-md-6 text-end d-flex align-items-end justify-content-end gap-2">
            <button id="exportCSV" class="btn btn-outline-success">üìÑ Xu·∫•t CSV</button>
            <button id="exportPDF" class="btn btn-outline-danger">üßæ Xu·∫•t PDF</button>
        </div>
    </div>

    <!-- T·ªïng quan -->
    <div class="row text-white mb-4">
        <div class="col-md-4">
            <div class="card bg-primary">
                <div class="card-header">T·ªïng y√™u c·∫ßu m∆∞·ª£n</div>
                <div class="card-body text-center">
                    <h4 id="totalRequests">...</h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success">
                <div class="card-header">ƒêang m∆∞·ª£n</div>
                <div class="card-body text-center">
                    <h4 id="totalBorrowing">...</h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-danger">
                <div class="card-header">Qu√° h·∫°n</div>
                <div class="card-body text-center">
                    <h4 id="totalOverdue">...</h4>
                </div>
            </div>
        </div>
    </div>

    <!-- Bi·ªÉu ƒë·ªì m∆∞·ª£n theo th·ªùi gian -->
    <div class="card shadow mb-4">
        <div class="card-header bg-info text-white">Bi·ªÉu ƒë·ªì m∆∞·ª£n thi·∫øt b·ªã theo th·ªùi gian</div>
        <div class="card-body">
            <canvas id="borrowByDateChart"></canvas>
        </div>
    </div>

    <!-- Bi·ªÉu ƒë·ªì thi·∫øt b·ªã m∆∞·ª£n nhi·ªÅu -->
    <div class="card shadow mb-4">
        <div class="card-header bg-warning">Top 10 thi·∫øt b·ªã ƒë∆∞·ª£c m∆∞·ª£n nhi·ªÅu nh·∫•t</div>
        <div class="card-body">
            <canvas id="topDevicesChart"></canvas>
        </div>
    </div>

    <!-- Bi·ªÉu ƒë·ªì theo ph√≤ng -->
    <div class="card shadow mb-4">
        <div class="card-header bg-secondary text-white">Bi·ªÉu ƒë·ªì m∆∞·ª£n theo ph√≤ng</div>
        <div class="card-body">
            <canvas id="borrowByRoomChart"></canvas>
        </div>
    </div>

    <!-- Danh s√°ch thi·∫øt b·ªã ƒëang m∆∞·ª£n -->
    <div class="card shadow mb-4">
        <div class="card-header bg-dark text-white">Danh s√°ch thi·∫øt b·ªã ƒëang m∆∞·ª£n</div>
        <div class="card-body">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Gi√°o vi√™n</th>
                        <th>Thi·∫øt b·ªã</th>
                        <th>Lo·∫°i</th>
                        <th>Ng√†y m∆∞·ª£n</th>
                    </tr>
                </thead>
                <tbody id="activeBorrowTable"></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- ‚úÖ Ch·ªâ gi·ªØ ƒë√∫ng 2 d√≤ng d√πng ƒë∆∞·ª£c tr√™n tr√¨nh duy·ªát -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
<script src="/src/app/Extesions/vietnameseFont.js"></script> <!-- Ch·ª©a font Roboto -->

<script>
document.addEventListener("DOMContentLoaded", function () {
    const { jsPDF } = window.jspdf; // ‚úÖ L·∫•y jsPDF t·ª´ UMD module

    const monthFilter = document.getElementById("monthFilter");
    const exportCSVBtn = document.getElementById("exportCSV");
    const exportPDFBtn = document.getElementById("exportPDF");
    let activeDataCache = [];

    async function loadStatistics(monthYear) {
        const params = monthYear ? `?month=${monthYear}` : "";

        const [summaryRes, dateRes, deviceRes, roomRes, activeRes] = await Promise.all([
            fetch("/api/statistics/borrow-return/summary" + params),
            fetch("/api/statistics/borrow-return/by-date" + params),
            fetch("/api/statistics/borrow-return/by-device" + params),
            fetch("/api/statistics/borrow-return/by-room" + params),
            fetch("/api/statistics/borrow-return/active" + params)
        ]);

        const [summaryData, dateData, deviceData, roomData, activeData] =
            await Promise.all([
                summaryRes.json(),
                dateRes.json(),
                deviceRes.json(),
                roomRes.json(),
                activeRes.json()
            ]);
        
        // T·ªïng quan
        if (summaryData.success && summaryData.data) {
            document.getElementById("totalRequests").innerText = summaryData.data.totalBorrowRequests || 0;
            document.getElementById("totalBorrowing").innerText = summaryData.data.statusCounts["ƒêang m∆∞·ª£n"] || 0;
            document.getElementById("totalOverdue").innerText = summaryData.data.statusCounts["Qu√° h·∫°n"] || 0;
        }

        // Danh s√°ch thi·∫øt b·ªã ƒëang m∆∞·ª£n
        if (activeData.success && activeData.data.length > 0) {
            const table = document.getElementById("activeBorrowTable");
            table.innerHTML = "";
            activeDataCache = activeData.data;
            activeData.data.forEach(req => {
                req.devices.forEach(device => {
                    const row = `
                        <tr>
                            <td>${req.teacher?.name || "Kh√¥ng r√µ"}</td>
                            <td>${device.name}</td>
                            <td>${device.category}</td>
                            <td>${new Date(req.borrow_date).toLocaleDateString()}</td>
                        </tr>
                    `;
                    table.innerHTML += row;
                });
            });
        }

        // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi v·∫Ω bi·ªÉu ƒë·ªì
        if (dateData.success && dateData.data.length > 0) {
            const labels = dateData.data.map(d => d._id);
            const counts = dateData.data.map(d => d.total);
            renderChart("borrowByDateChart", "line", labels, [{
                label: "L∆∞·ª£t m∆∞·ª£n",
                data: counts,
                borderColor: "#007bff",
                fill: false
            }]);
        } else {
            console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì borrowByDateChart");
        }

        if (deviceData.success && deviceData.data.length > 0) {
            const labels = deviceData.data.map(d => d.name);
            const counts = deviceData.data.map(d => d.totalBorrowed);
            renderChart("topDevicesChart", "bar", labels, [{
                label: "S·ªë l∆∞·ª£t m∆∞·ª£n",
                data: counts,
                backgroundColor: "#ffc107"
            }]);
        } else {
            console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì topDevicesChart");
        }

        if (roomData.success && roomData.data.length > 0) {
            const labels = roomData.data.map(r => r.roomName);
            const counts = roomData.data.map(r => r.total);
            renderChart("borrowByRoomChart", "bar", labels, [{
                label: "L∆∞·ª£t m∆∞·ª£n theo ph√≤ng",
                data: counts,
                backgroundColor: "#6c757d"
            }]);
        } else {
            console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì borrowByRoomChart");
        }
    }

    function renderChart(canvasId, type, labels, datasets) {
        const ctx = document.getElementById(canvasId)?.getContext("2d");
        if (!ctx) {
            console.error(`Kh√¥ng t√¨m th·∫•y th·∫ª canvas v·ªõi ID: ${canvasId}`);
            return;
        }

        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ bi·ªÉu ƒë·ªì tr∆∞·ªõc ƒë√≥ th√¨ x√≥a
        if (window[canvasId] instanceof Chart) {
            window[canvasId].destroy();
        }

        // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
        window[canvasId] = new Chart(ctx, {
            type,
            data: { labels, datasets },
            options: { responsive: true }
        });
    }


    // L·ªçc theo th√°ng
    monthFilter.addEventListener("change", () => {
        loadStatistics(monthFilter.value);
    });

     exportCSVBtn.addEventListener("click", () => {
        if (activeDataCache.length === 0) return alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t CSV!");
        let csv = "Gi√°o vi√™n,Thi·∫øt b·ªã,Lo·∫°i,Ng√†y m∆∞·ª£n\n";
        activeDataCache.forEach(req => {
            req.devices.forEach(device => {
                csv += `"${req.teacher?.name || "Kh√¥ng r√µ"}","${device.name}","${device.category}","${new Date(req.borrow_date).toLocaleDateString()}"\n`;
            });
        });

        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "thietbi-dang-muon.csv";
        link.click();
    });

    exportPDFBtn.addEventListener("click", () => {
        if (activeDataCache.length === 0) {
            alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t PDF!");
            return;
        }

        const doc = new jsPDF();

        doc.setFont("times", "normal"); // ‚úÖ S·ª≠ d·ª•ng font h·ªó tr·ª£ ti·∫øng Vi·ªát m·∫∑c ƒë·ªãnh

        doc.text("Danh s√°ch thi·∫øt b·ªã ƒëang m∆∞·ª£n", 10, 10);

        const rows = activeDataCache.flatMap(req =>
            req.devices.map(device => [
                req.teacher?.name || "Kh√¥ng r√µ",
                device.name,
                device.category,
                new Date(req.borrow_date).toLocaleDateString()
            ])
        );

        doc.autoTable({
            head: [["Gi√°o vi√™n", "Thi·∫øt b·ªã", "Lo·∫°i", "Ng√†y m∆∞·ª£n"]],
            body: rows,
            styles: { font: "times", fontStyle: "normal" } // ‚úÖ ƒê·∫£m b·∫£o font ƒë∆∞·ª£c d√πng
        });

        doc.save("thietbi-dang-muon.pdf");
    });

    loadStatistics(); // Load l·∫ßn ƒë·∫ßu
});
</script>

