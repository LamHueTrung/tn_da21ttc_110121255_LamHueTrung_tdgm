<div class="row add-user mb-4">
    <h1 class="title-add-user text-center mb-4">Tạo đơn yêu cầu quà tặng</h1>

    <div class="card-body">
       
        <div id="manualForm">
            <form id="createUserForm" enctype="multipart/form-data" class="col-md-6 offset-md-3">
                <div class="mb-3">
                    <label class="form-label">Mục đích sử dụng</label>
                </div>

                <table>
                    <tr>
                        <td>
                            <input style="width: 38px;height: 25px;" type="checkbox" class="Lydo" 
                            data-name="Công tác/nghiên cứu ở nước ngoài"
                            >
                        </td>
                        <td>
                            <label for="">Công tác/nghiên cứu ở nước ngoài</label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input style="width: 38px;height: 25px;" type="checkbox" class="Lydo" 
                            data-name="Tiếp đón khách trong/ngoài nước"
                            >
                        </td>
                        <td>
                            <label for="">Tiếp đón khách trong/ngoài nước</label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input style="width: 38px;height: 25px;" type="checkbox" class="Lydo" 
                            data-name="Tổ chức hội nghị/hội thảo"
                            >
                        </td>
                        <td>
                            <label for="">Tổ chức hội nghị/hội thảo</label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input style="width: 38px;height: 25px;" type="checkbox" class="Lydo" 
                            data-name="Giao lưu, trao đổi học thuật"
                            >
                        </td>
                        <td>
                            <label for="">Giao lưu, trao đổi học thuật</label>
                        </td>
                    </tr>
                </table>
                
            </form>
        </div>
        <div class="table-responsive">
            <h3 class="mt-4">Danh sách giảng viên</h3>
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th></th>
                        <th>Họ tên</th>
                        <th>Email</th>
                        <th>Số điện thoại</th>
                        <th>Phòng ban</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each teachers}}
                    <tr>
                        <td>
                            <input style="width: 38px;height: 25px;" type="radio" class="checkbox" 
                            data-id="{{this._id}}" 
                            data-name="{{ this.name}}"
                            ></td>
                        <td>{{this.name}}</td>
                        <td>{{this.email}}</td>
                        <td>{{this.phone}}</td>
                        <td>{{this.department}}</td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>

        <div class="d-flex mt-2" style="float: right;">
            <button type="button" onclick="javascript:history.back()" class="btn btn-secondary btn-previou">Quay lại</button>
            <button id="createOrderBtn" type="submit" class="btn btn-system btn-submit ml-2">Hoàn tất</button>
        </div>

    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const checkboxes = document.querySelectorAll(".checkbox");
        const createOrderBtn = document.getElementById("createOrderBtn");
        let datas = JSON.parse(localStorage.getItem("data")) || [];
        
        document.querySelectorAll(".Lydo").forEach(cb => {
            cb.addEventListener("change", function () {
                const name = this.dataset.name;

                if (this.checked) {
                    // Kiểm tra nếu chưa có thì thêm
                    if (!datas.some(d => d.purpose === name)) {
                        datas.push({ purpose: name });
                    }
                } else {
                    // Bỏ chọn thì xóa khỏi danh sách
                    datas = datas.filter(d => d.purpose !== name);
                }

                // Cập nhật localStorage
                localStorage.setItem("data", JSON.stringify(datas));
            });
        });

        function removePurpose(selected) {
            datas = datas.filter(data => !selected.includes(data.purpose));
        }

        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener("change", function () {
                const id = this.dataset.id;
                const name = this.dataset.name;

                if (this.checked) {
                    if (!datas.some(data => data.teacherId === id)) {
                        datas.push({ teacherId: id, nameTeacher: name });
                    }
                } else {
                    removeTeacher(id);
                }

                console.log(datas);
            });
        });

        function removeTeacher(id) {
            datas = datas.filter(data => data.teacherId !== id);
        }

        createOrderBtn.addEventListener("click", function () {

            localStorage.setItem("data", JSON.stringify(datas));
            const storedData = JSON.parse(localStorage.getItem("data")) || [];

            // Tìm giáo viên
            const teacher = storedData.find(item => item.teacherId);
            if (!teacher) {
                Swal.fire("Thiếu thông tin!", "Chưa chọn giảng viên.", "warning");
                return;
            }

            // Lấy danh sách quà tặng
            const gifts = storedData
                .filter(item => item.giftId)
                .map(gift => ({
                    giftId: gift.giftId,
                    quantity: gift.quantity
                }));

            if (gifts.length === 0) {
                Swal.fire("Thiếu quà tặng!", "Vui lòng chọn ít nhất một quà tặng.", "warning");
                return;
            }

            const purpose = storedData
                .filter(item => item.purpose)
                .map(item => item.purpose);

            if (purpose.length === 0) {
                Swal.fire("Thiếu mục đích!", "Vui lòng chọn ít nhất một mục đích sử dụng.", "warning");
                return;
            }
            // Tạo dữ liệu đơn mượn
            const borrowOrder = {
                teacherId: teacher.teacherId,
                gifts: gifts,
                purposes: purpose
            };

            console.log("Dữ liệu gửi đi:", borrowOrder);

            Swal.fire({
                title: 'Đã kiểm tra thông tin?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Đồng ý',
                cancelButtonText: 'Hủy',
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch("/api/reward/order/create", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        }, 
                        body: JSON.stringify(borrowOrder)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Kết quả trả về:", data);
                        if (data.success) {

                            Swal.fire({
                                icon: "success",
                                title: "Thành công!",
                                text: "Đơn yêu cầu quà tặng đã được tạo.",
                                confirmButtonText: "OK"
                            }).then(() => {
                                localStorage.removeItem("data");
                                window.location.href = "/reward/listRequestReward";
                            });
                        } else {
                            Swal.fire("Lỗi!", data.message || "Không thể tạo yêu cầu quà tặng.", "error");
                        }
                    })
                    .catch(error => {
                        console.error("Lỗi khi gửi yêu cầu:", error);
                        Swal.fire("Lỗi!", "Không thể kết nối đến máy chủ.", "error");
                    });
                }
            });
        });
    });
</script>
