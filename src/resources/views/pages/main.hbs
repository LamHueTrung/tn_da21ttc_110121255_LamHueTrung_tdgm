<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #1A1A1A;
        color: #D1D5DB;
    }
    .card-shadow {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        border: 1px solid #E02424;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .card-shadow:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(224, 36, 36, 0.3);
    }
    .gradient-bg {
        background: linear-gradient(to bottom, #2D2D2D, #1A1A1A);
    }
</style>

<!-- Kiểm tra và lưu token -->
<script>
    const token = "{{token}}"; // Lấy giá trị token từ server
    if (token) {
        localStorage.setItem('token', token);
        console.log('Token saved to localStorage:', token);
    } else {
        console.log('No token provided');
    }
</script>

<div class="container mx-auto p-6">
    <!-- Card thống kê -->
    <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6 mb-8">
        <!-- Thiết bị -->
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h6 class="text-xs font-bold uppercase">Thiết bị</h6>
            </div>
            <div class="p-4 flex items-center">
                <div class="flex-1">
                    <h5 class="text-2xl font-bold text-white">{{dashboardStats.deviceCount}}</h5>
                </div>
                <div>
                    <i class="fa-regular fa-hard-drive fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>

        <!-- Quà tặng -->
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h6 class="text-xs font-bold uppercase">Quà tặng</h6>
            </div>
            <div class="p-4 flex items-center">
                <div class="flex-1">
                    <h5 class="text-2xl font-bold text-white">{{dashboardStats.giftCount}}</h5>
                </div>
                <div>
                    <i class="fa-solid fa-gift fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>

        <!-- Phòng -->
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h6 class="text-xs font-bold uppercase">Phòng</h6>
            </div>
            <div class="p-4 flex items-center">
                <div class="flex-1">
                    <h5 class="text-2xl font-bold text-white">{{dashboardStats.roomCount}}</h5>
                </div>
                <div>
                    <i class="fa-solid fa-house fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>

        <!-- Đơn mượn/trả - yêu cầu -->
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h6 class="text-xs font-bold uppercase">Đơn mượn/trả - yêu cầu</h6>
            </div>
            <div class="p-4 flex items-center">
                <div class="flex-1">
                    <h5 class="text-2xl font-bold text-white">{{sum dashboardStats.giftOrderCount dashboardStats.borrowCount}}</h5>
                </div>
                <div>
                    <i class="fa-regular fa-face-dizzy fa-2x text-gray-300"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Nhóm: Biểu đồ tổng quan -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Biểu đồ tổng quan thiết bị -->
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h3 class="text-lg font-bold">Tổng quan thiết bị</h3>
            </div>
            <div class="p-6">
                <canvas id="deviceSummaryChart"></canvas>
            </div>
        </div>

        <!-- Biểu đồ tổng quan quà tặng -->
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h3 class="text-lg font-bold">Tổng quan quà tặng</h3>
            </div>
            <div class="p-6">
                <canvas id="giftSummaryChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Import Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", async function () {
        let deviceCategoryDataRaw = {}, deviceStatusDataRaw = {};
        let giftStockDataRaw = {}, giftTopRequestedDataRaw = {};

        async function loadStatistics() {
            try {
                const [
                    deviceCategoryRes, deviceStatusRes,
                    giftStockRes, giftTopRequestedRes
                ] = await Promise.all([
                    fetch("/api/statistics/device/summary-by-category").then(res => res.json()),
                    fetch("/api/statistics/device/status-counts").then(res => res.json()),
                    fetch("/api/statistics/reward/gift-stock").then(res => res.json()),
                    fetch("/api/statistics/reward/top-requested").then(res => res.json())
                ]);

                deviceCategoryDataRaw = deviceCategoryRes;
                deviceStatusDataRaw = deviceStatusRes;
                giftStockDataRaw = giftStockRes;
                giftTopRequestedDataRaw = giftTopRequestedRes;

                // Biểu đồ tổng quan thiết bị (Stacked Bar)
                if (deviceStatusDataRaw.success && deviceCategoryDataRaw.success) {
                    const labels = deviceCategoryDataRaw.data.map(c => c.category);
                    const datasets = deviceStatusDataRaw.data.map((status, index) => ({
                        label: status.status,
                        data: deviceCategoryDataRaw.data.map(category => {
                            // Giả định phân phối trạng thái theo danh mục (dựa trên tỷ lệ tổng)
                            const totalDevices = deviceCategoryDataRaw.data.reduce((sum, c) => sum + c.total, 0);
                            const statusTotal = status.total;
                            const categoryTotal = category.total;
                            return Math.round((statusTotal / totalDevices) * categoryTotal);
                        }),
                        backgroundColor: ["#E02424", "#4CAF50"][index % 2],
                        borderColor: ["#B91C1C", "#388E3C"][index % 2],
                        borderWidth: 1
                    }));

                    renderChart("deviceSummaryChart", "bar", labels, datasets, {
                        scales: {
                            x: { stacked: true, title: { display: true, text: 'Danh mục', color: '#D1D5DB', font: { size: 14 } }, ticks: { color: '#D1D5DB' } },
                            y: { stacked: true, beginAtZero: true, title: { display: true, text: 'Số lượng', color: '#D1D5DB', font: { size: 14 } }, ticks: { color: '#D1D5DB' } }
                        },
                        plugins: {
                            legend: { position: 'top', labels: { color: '#D1D5DB', font: { size: 12 } } },
                            title: { display: true, text: 'Thiết bị theo danh mục và trạng thái', color: '#D1D5DB', font: { size: 16 } },
                            datalabels: { display: true, color: '#FFFFFF', font: { size: 12 } }
                        }
                    });
                }

                // Biểu đồ tổng quan quà tặng (Bar)
                if (giftStockDataRaw.success && giftTopRequestedDataRaw.success) {
                    const categories = ["Học viên", "Đối tác"];
                    const stockData = categories.map(cat => 
                        giftStockDataRaw.data.filter(g => giftTopRequestedDataRaw.data.find(t => t.name === g.name && t.category === cat))
                            .reduce((sum, g) => sum + g.quantity_in_stock, 0)
                    );
                    const requestData = categories.map(cat => 
                        giftTopRequestedDataRaw.data.filter(g => g.category === cat)
                            .reduce((sum, g) => sum + g.totalRequested, 0)
                    );

                    renderChart("giftSummaryChart", "bar", categories, [
                        {
                            label: "Tồn kho",
                            data: stockData,
                            backgroundColor: "#E02424",
                            borderColor: "#B91C1C",
                            borderWidth: 1
                        },
                        {
                            label: "Yêu cầu",
                            data: requestData,
                            backgroundColor: "#4CAF50",
                            borderColor: "#388E3C",
                            borderWidth: 1
                        }
                    ], {
                        scales: {
                            x: { title: { display: true, text: 'Danh mục', color: '#D1D5DB', font: { size: 14 } }, ticks: { color: '#D1D5DB' } },
                            y: { beginAtZero: true, title: { display: true, text: 'Số lượng / Lượt yêu cầu', color: '#D1D5DB', font: { size: 14 } }, ticks: { color: '#D1D5DB' } }
                        },
                        plugins: {
                            legend: { position: 'top', labels: { color: '#D1D5DB', font: { size: 12 } } },
                            title: { display: true, text: 'Tồn kho và yêu cầu quà tặng', color: '#D1D5DB', font: { size: 16 } },
                            datalabels: { display: true, color: '#FFFFFF', font: { size: 12 } }
                        }
                    });
                }
            } catch (error) {
                console.error("Lỗi khi tải dữ liệu:", error);
                alert("Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại.");
            }
        }

        function renderChart(canvasId, type, labels, datasets, options = {}) {
            const ctx = document.getElementById(canvasId)?.getContext("2d");
            if (!ctx) {
                console.error(`Không tìm thấy thẻ canvas với ID: ${canvasId}`);
                return;
            }

            if (window[canvasId] instanceof Chart) {
                window[canvasId].destroy();
            }

            window[canvasId] = new Chart(ctx, {
                type,
                data: { labels, datasets },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top', labels: { color: '#D1D5DB' } },
                        tooltip: { enabled: true, backgroundColor: '#2D2D2D', titleColor: '#FFFFFF', bodyColor: '#D1D5DB' }
                    },
                    ...options
                }
            });
        }

        loadStatistics();
    });
</script>