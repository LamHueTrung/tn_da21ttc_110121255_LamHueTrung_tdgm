<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #1A1A1A;
        color: #D1D5DB;
    }
    .card-shadow {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        border: 1px solid #E02424;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .card-shadow:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(224, 36, 36, 0.3);
    }
    .gradient-bg {
        background: linear-gradient(to bottom, #2D2D2D, #1A1A1A);
    }
    .btn-hover {
        transition: all 0.3s ease;
        background: linear-gradient(to right, #E02424, #B91C1C);
    }
    .btn-hover:hover {
        background: linear-gradient(to right, #B91C1C, #E02424);
        box-shadow: 0 0 10px rgba(224, 36, 36, 0.5);
        transform: translateY(-2px);
    }
    .table-row-hover:hover {
        background-color: #3E1F1F;
    }
    input[type="month"] {
        background-color: #2D2D2D;
        color: #FFFFFF;
        border-color: #E02424;
    }
    input[type="month"]:focus {
        border-color: #E02424;
        outline: none;
        box-shadow: 0 0 5px rgba(224, 36, 36, 0.5);
    }
</style>

<div class="container mx-auto p-6">
    <!-- Tiêu đề và bộ lọc -->
    <div class="flex flex-col md:flex-row justify-between items-center mb-8">
        <h3 class="text-2xl font-bold text-dark mb-4 md:mb-0">Thống kê thiết bị</h3>
        <div class="flex flex-col md:flex-row items-center space-x-4">
            <div class="w-full md:w-auto">
                <label for="monthFilter" class="block text-sm font-medium text-dark mb-1">Lọc theo tháng:</label>
                <input type="month" id="monthFilter" class="w-full px-3 py-2 rounded-md border focus:ring-0">
            </div>
            <button id="exportCSV" class="btn-hover text-white px-6 py-2 rounded-full text-sm font-semibold flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H3a2 2 0 01-2-2V3a2 2 0 012-2h18a2 2 0 012 2v16a2 2 0 01-2 2z"></path></svg>
                Xuất CSV
            </button>
        </div>
    </div>

    <!-- Tổng quan -->
    <div class="card-shadow gradient-bg rounded-lg mb-8 p-6">
        <div class="bg-red-600 text-white p-4 rounded-t-lg">
            <h3 class="text-lg font-bold">Tổng quan thiết bị</h3>
        </div>
        <div class="p-6 flex flex-col md:flex-row gap-6">
            <div class="w-full md:w-1/3">
                <h3 class="text-lg font-bold text-white">Trạng thái thiết bị</h3>
                <p id="totalInUse" class="text-xl font-bold text-red-500 mt-2">Đang sử dụng: 94</p>
                <p id="totalNew" class="text-xl font-bold text-red-500 mt-2">Mới: 50</p>
                <h3 class="text-lg font-bold text-white mt-4">Tổng số thiết bị</h3>
                <p id="totalDevices" class="text-xl font-bold text-red-500 mt-2">Tổng: 145</p>
            </div>
            <div class="w-full md:w-2/3">
                <canvas id="summaryChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Biểu đồ kết hợp cột + đường -->
    <div class="card-shadow gradient-bg rounded-lg mb-8">
        <div class="bg-red-600 text-white p-4 rounded-t-lg">
            <h3 class="text-lg font-bold">Số lượng và mức độ sử dụng thiết bị theo danh mục</h3>
        </div>
        <div class="p-6">
            <canvas id="combinedChart"></canvas>
        </div>
    </div>

    <!-- Biểu đồ thiết bị theo danh mục và top thiết bị -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h3 class="text-lg font-bold">Phân phối thiết bị theo danh mục</h3>
            </div>
            <div class="p-6">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h3 class="text-lg font-bold">Top thiết bị được sử dụng</h3>
            </div>
            <div class="p-6">
                <canvas id="mostUsedChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Biểu đồ thiết bị theo phòng -->
    <div class="card-shadow gradient-bg rounded-lg mb-8">
        <div class="bg-red-600 text-white p-4 rounded-t-lg">
            <h3 class="text-lg font-bold">Phân phối thiết bị theo phòng</h3>
        </div>
        <div class="p-6">
            <canvas id="deviceByRoomChart"></canvas>
        </div>
    </div>

    <!-- Danh sách thiết bị trong kho và sắp bảo trì -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h3 class="text-lg font-bold">Thiết bị sắp đến kỳ bảo trì</h3>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="w-full text-left border-collapse">
                        <thead>
                            <tr class="bg-gray-800 text-white">
                                <th class="p-3 text-sm font-semibold">Tên thiết bị</th>
                                <th class="p-3 text-sm font-semibold">Loại</th>
                                <th class="p-3 text-sm font-semibold">Trạng thái</th>
                                <th class="p-3 text-sm font-semibold">Ngày bảo trì gần nhất</th>
                            </tr>
                        </thead>
                        <tbody id="upcomingMaintenanceList" class="divide-y divide-gray-700"></tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card-shadow gradient-bg rounded-lg">
            <div class="bg-red-600 text-white p-4 rounded-t-lg">
                <h3 class="text-lg font-bold">Thiết bị trong kho chính</h3>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="w-full text-left border-collapse">
                        <thead>
                            <tr class="bg-gray-800 text-white">
                                <th class="p-3 text-sm font-semibold">Tên thiết bị</th>
                                <th class="p-3 text-sm font-semibold">Loại</th>
                                <th class="p-3 text-sm font-semibold">Số lượng</th>
                            </tr>
                        </thead>
                        <tbody id="mainWarehouseList" class="divide-y divide-gray-700"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Import Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const monthFilter = document.getElementById("monthFilter");
        const exportCSVBtn = document.getElementById("exportCSV");
        let categoryDataRaw = {}, statusDataRaw = {}, mostUsedDataRaw = {}, warehouseDataRaw = {};

        // Dữ liệu mẫu cho API /api/statistics/device/by-room
        const roomDataRaw = {
            success: true,
            data: [
                { roomName: "A42.405", total: 50 },
                { roomName: "A42.505", total: 30 },
                { roomName: "A42.201", total: 20 }
            ]
        };

        async function loadStatistics(monthYear) {
            const params = monthYear ? `?month=${monthYear}` : "";
            try {
                const [categoryRes, statusRes, mostUsedRes, maintenanceRes, warehouseRes] = await Promise.all([
                    fetch("/api/statistics/device/summary-by-category" + params).then(res => res.json()),
                    fetch("/api/statistics/device/status-counts" + params).then(res => res.json()),
                    fetch("/api/statistics/device/most-used" + params).then(res => res.json()),
                    fetch("/api/statistics/device/upcoming-maintenance" + params).then(res => res.json()),
                    fetch("/api/statistics/device/in-main-warehouse" + params).then(res => res.json())
                ]);

                categoryDataRaw = categoryRes;
                statusDataRaw = statusRes;
                mostUsedDataRaw = mostUsedRes;
                warehouseDataRaw = warehouseRes;

                // Tổng quan
                if (statusDataRaw.success && categoryDataRaw.success) {
                    document.getElementById("totalInUse").innerText = `Đang sử dụng: ${statusDataRaw.data.find(s => s.status === "Đang sử dụng")?.total || 0}`;
                    document.getElementById("totalNew").innerText = `Mới: ${statusDataRaw.data.find(s => s.status === "Mới")?.total || 0}`;
                    document.getElementById("totalDevices").innerText = `Tổng: ${categoryDataRaw.data.reduce((sum, c) => sum + c.total, 0)}`;

                    // Biểu đồ tổng quan (Pie Chart)
                    const labels = [
                        ...statusDataRaw.data.map(s => s.status),
                        ...categoryDataRaw.data.map(c => c.category)
                    ];
                    const data = [
                        ...statusDataRaw.data.map(s => s.total),
                        ...categoryDataRaw.data.map(c => c.total)
                    ];
                    renderChart("summaryChart", "pie", labels, [{
                        label: "Trạng thái và danh mục",
                        data: data,
                        backgroundColor: ["#E02424", "#4CAF50", "#FFC107", "#2196F3", "#9C27B0", "#FF9800", "#00BCD4"],
                        borderColor: ["#B91C1C", "#388E3C", "#FFA000", "#1976D2", "#7B1FA2", "#F57C00", "#0097A7"],
                        borderWidth: 1
                    }], {
                        plugins: {
                            legend: { position: 'top', labels: { color: '#D1D5DB' } },
                            title: { display: true, text: 'Tổng quan trạng thái và danh mục thiết bị', color: '#D1D5DB' }
                        }
                    });
                }

                // Biểu đồ kết hợp cột + đường
                if (categoryDataRaw.success && mostUsedDataRaw.success) {
                    const labels = categoryDataRaw.data.map(c => c.category);
                    const deviceCounts = categoryDataRaw.data.map(c => c.total);
                    const borrowCounts = labels.map(category => {
                        return mostUsedDataRaw.data.filter(d => d.category === category).reduce((sum, d) => sum + d.totalBorrowed, 0);
                    });

                    renderChart("combinedChart", "bar", labels, [
                        {
                            type: "bar",
                            label: "Số lượng thiết bị",
                            data: deviceCounts,
                            backgroundColor: "#E02424",
                            borderColor: "#B91C1C",
                            borderWidth: 1
                        },
                        {
                            type: "line",
                            label: "Tổng lượt sử dụng",
                            data: borrowCounts,
                            borderColor: "#4CAF50",
                            backgroundColor: "rgba(76, 175, 80, 0.2)",
                            fill: true,
                            tension: 0.4
                        }
                    ], {
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Số lượng / Lượt sử dụng', color: '#D1D5DB' }, ticks: { color: '#D1D5DB' } },
                            x: { title: { display: true, text: 'Danh mục thiết bị', color: '#D1D5DB' }, ticks: { color: '#D1D5DB' } }
                        },
                        plugins: {
                            legend: { labels: { color: '#D1D5DB' } },
                            title: { display: true, text: 'Số lượng và mức độ sử dụng thiết bị theo danh mục', color: '#D1D5DB' }
                        }
                    });
                }

                // Biểu đồ phân phối thiết bị theo danh mục
                if (categoryDataRaw.success) {
                    const labels = categoryDataRaw.data.map(c => c.category);
                    const counts = categoryDataRaw.data.map(c => c.total);
                    renderChart("categoryChart", "pie", labels, [{
                        label: "Số lượng thiết bị",
                        data: counts,
                        backgroundColor: ["#E02424", "#4CAF50", "#FFC107", "#2196F3", "#9C27B0", "#FF9800"],
                        borderColor: ["#B91C1C", "#388E3C", "#FFA000", "#1976D2", "#7B1FA2", "#F57C00"],
                        borderWidth: 1
                    }], {
                        plugins: {
                            legend: { position: 'top', labels: { color: '#D1D5DB' } },
                            title: { display: true, text: 'Phân phối thiết bị theo danh mục', color: '#D1D5DB' }
                        }
                    });
                }

                // Biểu đồ top thiết bị được sử dụng
                if (mostUsedDataRaw.success) {
                    const labels = mostUsedDataRaw.data.map(d => `${d.name} (${d.category})`);
                    const counts = mostUsedDataRaw.data.map(d => d.totalBorrowed);
                    renderChart("mostUsedChart", "bar", labels, [{
                        label: "Số lượt sử dụng",
                        data: counts,
                        backgroundColor: "#E02424",
                        borderColor: "#B91C1C",
                        borderWidth: 1
                    }], {
                        indexAxis: 'y',
                        scales: {
                            x: { beginAtZero: true, title: { display: true, text: 'Số lượt sử dụng', color: '#D1D5DB' }, ticks: { color: '#D1D5DB' } },
                            y: { title: { display: true, text: 'Thiết bị', color: '#D1D5DB' }, ticks: { color: '#D1D5DB' } }
                        },
                        plugins: {
                            legend: { labels: { color: '#D1D5DB' } },
                            title: { display: true, text: 'Top thiết bị được sử dụng', color: '#D1D5DB' }
                        }
                    });
                }

                // Biểu đồ thiết bị theo phòng (Stacked Bar)
                if (roomDataRaw.success && categoryDataRaw.success) {
                    const labels = categoryDataRaw.data.map(c => c.category);
                    const rooms = roomDataRaw.data.map(r => r.roomName);
                    const datasets = rooms.map((room, index) => ({
                        label: room,
                        data: categoryDataRaw.data.map(category => {
                            const roomTotal = roomDataRaw.data[index].total;
                            const categoryTotal = categoryDataRaw.data.find(c => c.category === category.category).total;
                            return Math.round((roomTotal / 100) * categoryTotal); // Phân phối giả định
                        }),
                        backgroundColor: ["#E02424", "#4CAF50", "#FFC107", "#2196F3"][index % 4],
                        borderColor: ["#B91C1C", "#388E3C", "#FFA000", "#1976D2"][index % 4],
                        borderWidth: 1
                    }));

                    renderChart("deviceByRoomChart", "bar", labels, datasets, {
                        scales: {
                            x: { stacked: true, title: { display: true, text: 'Danh mục thiết bị', color: '#D1D5DB' }, ticks: { color: '#D1D5DB' } },
                            y: { stacked: true, beginAtZero: true, title: { display: true, text: 'Số lượng thiết bị', color: '#D1D5DB' }, ticks: { color: '#D1D5DB' } }
                        },
                        plugins: {
                            legend: { labels: { color: '#D1D5DB' } },
                            title: { display: true, text: 'Phân phối thiết bị theo danh mục và phòng', color: '#D1D5DB' }
                        }
                    });
                }

                // Danh sách thiết bị sắp bảo trì
                if (maintenanceRes.success) {
                    const list = document.getElementById("upcomingMaintenanceList");
                    list.innerHTML = maintenanceRes.data.length > 0 ? "" : '<tr><td colspan="4" class="p-3 text-center text-gray-500">Không có dữ liệu</td></tr>';
                    maintenanceRes.data.forEach(item => {
                        list.innerHTML += `
                            <tr class="table-row-hover text-gray-300">
                                <td class="p-3">${item.device?.name || "Không rõ"}</td>
                                <td class="p-3">${item.device?.category || "Không rõ"}</td>
                                <td class="p-3">${item.status || "Không rõ"}</td>
                                <td class="p-3">${new Date(item.last_maintenance).toLocaleDateString('vi-VN') || "Không rõ"}</td>
                            </tr>`;
                    });
                }

                // Danh sách thiết bị trong kho chính
                if (warehouseDataRaw.success) {
                    const list = document.getElementById("mainWarehouseList");
                    list.innerHTML = "";
                    warehouseDataRaw.data.forEach(item => {
                        list.innerHTML += `
                            <tr class="table-row-hover text-gray-300">
                                <td class="p-3">${item.name || "Không rõ"}</td>
                                <td class="p-3">${item.category || "Không rõ"}</td>
                                <td class="p-3">${item.total || 0}</td>
                            </tr>`;
                    });
                }
            } catch (error) {
                console.error("Lỗi khi tải dữ liệu:", error);
                alert("Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại.");
            }
        }

        function renderChart(canvasId, type, labels, datasets, options = {}) {
            const ctx = document.getElementById(canvasId)?.getContext("2d");
            if (!ctx) {
                console.error(`Không tìm thấy thẻ canvas với ID: ${canvasId}`);
                return;
            }

            if (window[canvasId] instanceof Chart) {
                window[canvasId].destroy();
            }

            window[canvasId] = new Chart(ctx, {
                type,
                data: { labels, datasets },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top', labels: { color: '#D1D5DB' } },
                        tooltip: { enabled: true, backgroundColor: '#2D2D2D', titleColor: '#FFFFFF', bodyColor: '#D1D5DB' }
                    },
                    ...options
                }
            });
        }

        // Xuất CSV
        exportCSVBtn.addEventListener("click", () => {
            if (!categoryDataRaw.success || !statusDataRaw.success || !mostUsedDataRaw.success || !warehouseDataRaw.success) {
                alert("Không có đủ dữ liệu để xuất CSV!");
                return;
            }

            let csv = '\uFEFF'; // BOM để tránh lỗi tiếng Việt

            // Tổng quan
            csv += '--- TỔNG QUAN ---\n';
            csv += 'Trạng thái,Số lượng\n';
            statusDataRaw.data.forEach(s => {
                csv += `"${s.status}",${s.total}\n`;
            });
            csv += `Tổng thiết bị,${categoryDataRaw.data.reduce((sum, c) => sum + c.total, 0)}\n\n`;

            // Phân phối thiết bị theo danh mục
            csv += '--- PHÂN PHỐI THEO DANH MỤC ---\n';
            csv += 'Danh mục,Số lượng,Tổng lượt sử dụng\n';
            categoryDataRaw.data.forEach(c => {
                const borrowCount = mostUsedDataRaw.data.filter(d => d.category === c.category).reduce((sum, d) => sum + d.totalBorrowed, 0);
                csv += `"${c.category}",${c.total},${borrowCount}\n`;
            });
            csv += '\n';

            // Thiết bị theo phòng
            csv += '--- PHÂN PHỐI THEO PHÒNG ---\n';
            csv += 'Danh mục,' + roomDataRaw.data.map(r => `"${r.roomName}"`).join(',') + '\n';
            categoryDataRaw.data.forEach(c => {
                const row = [c.category];
                roomDataRaw.data.forEach(r => {
                    const count = Math.round((r.total / 100) * c.total);
                    row.push(count);
                });
                csv += `"${row.join('","')}"\n`;
            });
            csv += '\n';

            // Top thiết bị sử dụng
            csv += '--- TOP THIẾT BỊ SỬ DỤNG ---\n';
            csv += 'Thiết bị,Loại,Số lượt sử dụng\n';
            mostUsedDataRaw.data.forEach(d => {
                csv += `"${d.name}","${d.category}",${d.totalBorrowed}\n`;
            });
            csv += '\n';

            // Thiết bị trong kho chính
            csv += '--- THIẾT BỊ TRONG KHO CHÍNH ---\n';
            csv += 'Tên thiết bị,Loại,Số lượng\n';
            warehouseDataRaw.data.forEach(item => {
                csv += `"${item.name || 'Không rõ'}","${item.category || 'Không rõ'}",${item.total || 0}\n`;
            });

            const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = `thong-ke-thiet-bi_${new Date().toLocaleDateString('vi-VN').replace(/\//g, '-')}.csv`;
            link.click();
        });

        // Lọc theo tháng
        monthFilter.addEventListener("change", () => {
            loadStatistics(monthFilter.value);
        });

        loadStatistics();
    });
</script>